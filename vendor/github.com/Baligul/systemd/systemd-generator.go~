package systemd

import (
	"bufio"
	"io/ioutil"
	"os"
	"strings"
	"text/template"
)

const (	OS_UBUNTU = "Ubuntu"
	RELEASE_FILE = "/etc/os-release"
	NAME = "NAME"
	EQUAL = "="
	QUOTE = "\""
	NEW_LINE = "\n"
	SYSCONFIG = "sysconfig"
	DEFAULT = "default"
	OUT_SERVICE_FILE_NAME = "dynomite.service"
	TMPL_SERVICE_FILE_NAME = "dynomite.service.tmpl")

func getOS() string {
	var (
		content []byte
		err     error
		os      string
	)
	content, err = ioutil.ReadFile(RELEASE_FILE)
	if err != nil {
		panic(err)
	}
	lines := strings.Split(string(content), NEW_LINE)
	for _, value := range lines {
		if strings.HasPrefix(strings.TrimSpace(value), NAME) {
			os = strings.Trim(strings.Split(value, EQUAL)[1], QUOTE)
		}
	}
	return os
}

func generateFile(oS string) {
	tmplFile, err := os.Create(OUT_SERVICE_FILE_NAME)
	if err != nil {
		panic(err)
	}
	wr := bufio.NewWriter(tmplFile)
	type OsConfigDir struct {
		OsConfigDir string
	}
	var dirPath = OsConfigDir{SYSCONFIG}

	if oS == OS_UBUNTU {
		dirPath = OsConfigDir{DEFAULT}
	}
	tmpl, err := template.ParseFiles(TMPL_SERVICE_FILE_NAME)
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(wr, dirPath)
	if err != nil {
		panic(err)
	}
	wr.WriteString("")
	wr.Flush()
	tmplFile.Close()
}

func GenerateServiceFile() {
	oS := getOS()
	generateFile(oS)
}
